//********* Mapper Task ********* //

package com.acadgild.mapreducetask2;

import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.*;

//***** MRMapperTask2 class description *****//
//first two arguments of Mapper class work for input, and last two arguments work for output
public class MRMapperTask2 extends Mapper <LongWritable, Text, Text, Text>
{
	//***** setup() method description *****//
	//used to setup connection with DB like in case of jdbc, here we don't need to override this method
	
	public void setup() {}  

	//***** map() method description *****//
	//Input to map method is in the form of key-value pair,
	//Therefore, key is taken as LongWritable and whole value is taken as Text
	//context (object of Context class) here works to match the value generated by the map method to match correctly with Mapper class's last two arguments i.e. Text and Text

	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException
	{
		String[] lineArray = value.toString().split("\\|");  //this line of code splits the values of a record on the basis  of "|" delimiter, since | has predefined meaning,therefore \\ is used to escape from its predefined meaning and split values are stored in lineArray
		String compName = new String(lineArray[0]); //this line of code fetches first value of lineArray, i.e. company_name 
		String prodName = new String(lineArray[1]); //this line of code fetches second value of lineArray i.e. product_name
		String valNA = new String("NA");  //this line of code creates String object with value NA
		
		if ((!valNA.equals(compName)) && (!valNA.equals(prodName)))  //this line of code compares compName and prodName with valNA (i.e. "NA"), if value of either does not match with valNA, then this if block executes, use !valNA.equals(compName) and !valNA.equals(prodName) rather than !compName.equals(valNA) and !prodName.equals(compName) in order to avoid NullPointerException which may arise if compName is Null or ProdName is Null
		{
			Text compName1 = new Text(compName); //to convert String to Text, in order to match context arguments
			Text prodName1 = new Text(prodName); //to convert String to Text, in order to match context arguments
			context.write(compName1, prodName1);  //this line of code writes output ( e.g. (Samsung, Optima), (Samsung, Optima) etc. to local fs of map machine 
		}
		
	}
	public void cleanup() {} //this method cleans up the resources used by the program, here we don't need to override this method
}
