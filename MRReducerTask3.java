//********* Reducer Task ********* //

package com.acadgild.mapreducetask3;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.*;

//***** MRReducerTask3 class description *****//
//first two arguments of Reducer class work for input, and last two arguments work for output
public class MRReducerTask3 extends Reducer <Text, Text, Text, IntWritable>
{
	//***** setup() method description *****//
	//used to setup connection with DB like in case of jdbc, here we don't need to override this method
	
	public void setup() {}  

	//***** reduce() method description *****//
	//Input to reduce method is in the form of key-iterable(values) pair,
	//here, key is taken as Text and iterable(values) are taken as Text
	//context (object of Context class) here works to match the value generated by the map method to match correctly with Mapper class last two arguments i.e. Text and Text

	public void reduce(Text key, Iterable <Text> values, Context context) throws IOException, InterruptedException
	{
		int countUnits = 0;
		Text invalidVal = new Text("NA");
		for(Text value : values) //loop for each value generated for each key
		{
			
			if(!invalidVal.equals(value)) //to consider only those iterable values which are not NA
				countUnits++;
			else
				continue;
				
		}
			
		context.write(key, new IntWritable(countUnits)); //this line of code writes output ( e.g. Onida, 3 etc. to local fs of reduce machine
	}
	public void cleanup() {} //this method cleans up the resources used by the program, here we don't need to override this method
}
